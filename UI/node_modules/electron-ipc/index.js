'use strict'

const ID = require('hat').rack()
const handoff = require('handoff')
const electron = require('electron')

const IS_RENDERER = typeof window !== 'undefined' && window.process && window.process.type === 'renderer'
const TARGET = IS_RENDERER ? electron.ipcRenderer : electron.ipcMain

let MESSAGES = {}
let WINDOWS = []

function sendIPC (...args) {
  let id = ID()
  return new Promise((resolve, reject) => {
    MESSAGES[id] = {resolve, reject}
    if (IS_RENDERER) {
      TARGET.send('handoff.request', id, ...args)
    } else {
      WINDOWS.forEach(win => win.webContents.send('handoff.request', id, ...args))
    }
  })
}

TARGET.on('handoff.response', (event, id, success, response) => {
  let promise = MESSAGES[id]
  if (!promise) throw new Error('Unexpected response...')
  if (success) promise.resolve(response)
  else {
    let err = new Error(response.message)
    err.stack = response.stack
    promise.reject(err)
  }
  delete MESSAGES[id]
})

TARGET.on('handoff.request', (event, id, ...args) => {
  handoff.publish(...args).then(response => {
    event.sender.send('handoff.response', id, true, response)
  }).catch(err => {
    event.sender.send('handoff.response', id, false, {message: err.message, stack: err.stack})
  })
})

module.exports = {

  addWindow (win) {
    WINDOWS.push(win)
  },

  removeWindow (win) {
    let idx = WINDOWS.indexOf(win)
    if (!~idx) return
    WINDOWS.splice(idx, 1)
  },

  publish (...args) {
    return sendIPC(...args)
  },

  subscribe (...args) {
    return handoff.subscribe(...args)
  },

  unsubscribe (...args) {
    return handoff.unsubscribe(...args)
  },

  hold (...args) {
    return handoff.hold(...args)
  },

  resume (...args) {
    return handoff.resume(...args)
  },

  __reset (...args) {
    return handoff.__reset(...args)
  }
}
