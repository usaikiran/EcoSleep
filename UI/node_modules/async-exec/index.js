"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const child_process_1 = require("child_process");
function default_1(command, logOutput = false) {
    return __awaiter(this, void 0, void 0, function* () {
        return logOutput ? execAndLog(command) : execWithCallbackOnData(command);
    });
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
function execAndLog(command) {
    return __awaiter(this, void 0, void 0, function* () {
        return execWithCallbackOnLine(command, console.log);
    });
}
exports.execAndLog = execAndLog;
function execWithCallbackOnLine(command, funcForLine) {
    return __awaiter(this, void 0, void 0, function* () {
        return execWithCallbackOnData(command, (data) => {
            data.toString().split('\n').forEach(line => funcForLine(line));
        });
    });
}
exports.execWithCallbackOnLine = execWithCallbackOnLine;
function execWithCallbackOnData(command, funcForData = null) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            const process = child_process_1.exec(command, (error, stdout, stderr) => {
                if (error) {
                    return reject(error);
                }
                else {
                    resolve(stdout);
                }
            });
            if (funcForData) {
                process.stdout.on('data', funcForData);
            }
        });
    });
}
exports.execWithCallbackOnData = execWithCallbackOnData;
//# sourceMappingURL=index.js.map